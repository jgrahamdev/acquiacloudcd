<?php

/**
 * @file
 * Contains df_tools_media.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewEntityInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_migration_plugins_alter().
 */
function df_tools_media_migration_plugins_alter(&$definitions) {
  $id = 'import_media_image';
  $definitions[$id]['source']['path'] = str_replace('..', dirname(__FILE__), $definitions[$id]['source']['path']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function df_tools_media_form_entity_browser_media_browser_in_modal_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'lightning_media/browser.styling';
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function df_tools_media_views_insert(ViewEntityInterface $view) {
  if (\Drupal::isConfigSyncing()) {
    return;
  }
  elseif (drupal_installation_attempted() && $view->id() == 'media') {
    $display1 = &$view->getDisplay('entity_browser_1');
    $display2 = &$view->getDisplay('entity_browser_2');
    $display1['display_options']['filters']['field_tags_target_id'] = $display2['display_options']['filters']['field_tags_target_id'] = [
      'id' => 'field_tags_target_id',
      'table' => 'media__field_tags',
      'field' => 'field_tags_target_id',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => 'or',
      'value' => [],
      'group' => 1,
      'exposed' => true,
      'expose' => [
        'operator_id' => 'field_tags_target_id_op',
        'label' => 'Tags',
        'description' => '',
        'use_operator' => false,
        'operator' => 'field_tags_target_id_op',
        'identifier' => 'field_tags_target_id',
        'required' => false,
        'remember' => false,
        'multiple' => false,
        'remember_roles' => [
          'authenticated' => 'authenticated',
          'anonymous' => '0',
          'administrator' => '0',
          'layout_manager' => '0',
          'creator' => '0',
          'reviewer' => '0',
          'media_creator' => '0',
          'media_manager' => '0',
        ],
        'reduce' => false,
      ],
      'is_grouped' => false,
      'group_info' => [
        'label' => '',
        'description' => '',
        'identifier' => '',
        'optional' => true,
        'widget' => 'select',
        'multiple' => false,
        'remember' => false,
        'default_group' => 'All',
        'default_group_multiple' => [],
        'group_items' => [],
      ],
      'reduce_duplicates' => false,
      'type' => 'textfield',
      'limit' => true,
      'vid' => 'media_tags',
      'hierarchy' => false,
      'error_message' => true,
      'plugin_id' => 'taxonomy_index_tid',
    ];
    $view->save();
  }
}

/**
 * Implements hook_theme().
 */
function df_tools_media_theme() {
  return [
    'media_video_file_formatter__df_tools_media' => [
      'base hook' => 'media_video_file_formatter',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for media_video_file_formatter.
 */
function df_tools_media_theme_suggestions_media_video_file_formatter_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = 'media_video_file_formatter__df_tools_media_video';
}

/**
 * Implements template_preprocess_HOOK() for media_video_file_formatter.
 */
function df_tools_media_preprocess_media_video_file_formatter__df_tools_media_video(&$variables) {
  // By default, 'extravalue' contains a string. If the HMTL5 video formatter
  // has some attributes with values, special chars (like double comma) will be
  // escaped.
  // To fix this, we replace 'extravalue' with a properly set Twig Attribute
  // object and properly update the 'attribute' array as well.
  $attribute = new Attribute();
  if (!empty($variables['extravalue'])) {
    $attributes_raw = explode(' ', trim($variables['extravalue']));

    foreach ($attributes_raw as $attribute_raw) {
      if (($delimiter_pos = strpos($attribute_raw, '=')) !== FALSE) {
        $key = substr($attribute_raw, 0, $delimiter_pos);
        $value = trim(substr($attribute_raw, ($delimiter_pos + 1)), " \"\t\n\r\0\x0B");

        if (!in_array($value, ['true', 'TRUE'])) {
          $variables['attributes'][$key] = $value;
          $attribute->setAttribute($key, $value);
          continue;
        }
      }

      $variables['attributes'][$attribute_raw] = TRUE;
      $attribute->setAttribute($attribute_raw, TRUE);
    }
  }

  $variables['extravalue'] = $attribute;
}
