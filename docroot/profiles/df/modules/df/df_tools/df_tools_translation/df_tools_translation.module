<?php

/**
 * @file
 * Contains df_tools_translation.module.
 */

use Drupal\migrate_source_csv\CSVFileObject;
use Drupal\Core\Entity\FieldableEntityInterface;

/**
 * Performs minimum steps necessary to load a CSV from a file.
 *
 * @param string $filename The filename of a CSV
 *
 * @return \Drupal\migrate_source_csv\CSVFileObject The prepared CSV object
 */
function df_tools_translation_initialize_csv($filename) {
  // Grab the processed CSV file using existing CSV methods.
  $file = new CSVFileObject($filename);
  $file->setHeaderRowCount(1);

  // Map the column names (first row) to values.
  $row = $file->current();
  $column_names = [];
  foreach ($row as $header) {
    $header = trim($header);
    $column_names[] = [$header => $header];
  }
  $file->setColumnNames($column_names);

  return $file;
}

/**
 * Enables translation for the given entity bundles and all their fields.
 *
 * @param array $entity_info An array mapping entity types to arrays of bundles.
 */
function df_tools_translation_enable_translation($entity_info) {
  // Enable translation for all of our entities/bundles.
  $type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');
  /** @var \Drupal\content_translation\ContentTranslationManagerInterface $translation_manager */
  $translation_manager = \Drupal::service('content_translation.manager');
  $supported_types = $translation_manager->getSupportedEntityTypes();
  foreach ($entity_info as $entity_type_id => $bundles) {
    foreach ($bundles as $bundle) {
      // Store whether a bundle has translation enabled or not.
      if (isset($supported_types[$entity_type_id])) {
        $translation_manager->setEnabled($entity_type_id, $bundle, TRUE);
      }
      // Make every field translatable as well.
      $entity_type = $type_manager->getDefinition($entity_type_id);
      if ($entity_type && $entity_type->isSubclassOf(FieldableEntityInterface::class)) {
        $fields = $field_manager->getFieldDefinitions($entity_type_id, $bundle);
        foreach ($fields as $field) {
          $field_config = $field->getConfig($bundle);
          if ($field_config->isTranslatable() && strpos($field->getName(), 'content_translation_') !== 0) {
            $field_config->setTranslatable(TRUE)->save();
          }
        }
      }
    }
  }
  // Ensure entity and menu router information are correctly rebuilt.
  $type_manager->clearCachedDefinitions();
  \Drupal::service('router.builder')->setRebuildNeeded();
}

/**
 * Updates the current site's translations via a batch process.
 */
function df_tools_translation_update_config_translation() {
  // The Locale module splits its translation functions into separate include
  // files, based on utility.
  // To ensure that each function we require is available, load its respective
  // include file.
  \Drupal::moduleHandler()->loadInclude('locale', 'bulk.inc');
  \Drupal::moduleHandler()->loadInclude('locale', 'compare.inc');
  \Drupal::moduleHandler()->loadInclude('locale', 'fetch.inc');
  \Drupal::moduleHandler()->loadInclude('locale', 'translation.inc');

  // Get a list of all currently installed languages as langcodes.
  $languageManager = \Drupal::languageManager();
  $langcodes = array_keys($languageManager->getLanguages());

  // Set a batch to download and import translations.
  locale_translation_flush_projects();
  locale_translation_check_projects();
  $options = _locale_translation_default_update_options();
  $batch = locale_translation_batch_fetch_build([], $langcodes, $options);
  batch_set($batch);
  // Set a batch to update configuration as well.
  if ($batch = locale_config_batch_update_components($options, $langcodes)) {
    $batch['file'] = drupal_get_path('module', 'df_tools_translation') . '/df_tools_translation.batch.inc';
    batch_set($batch);
  }
}

/**
 * Imports all relevant translations from a modules /translations directory.
 *
 * @param string $type The project type.
 * @param string $name The name of the project.
 *
 * @return bool FALSE if the project does not exist.
 */
function df_tools_translation_import_translations($type, $name) {
  // Attempt to pull module path.
  $path = drupal_get_path($type, $name);
  if (!$path) {
    return FALSE;
  }

  // Get a list of all currently installed languages as langcodes.
  $languageManager = \Drupal::languageManager();
  $langcodes = array_keys($languageManager->getLanguages());

  // Import each file.
  foreach ($langcodes as $langcode) {
    $filepath = DRUPAL_ROOT . '/' . $path . '/translations/' . $langcode . '.po';
    if (file_exists($filepath)) {
      \Drupal::moduleHandler()->loadInclude('locale', 'bulk.inc');
      \Drupal::moduleHandler()->loadInclude('locale', 'translation.inc');
      $options = array_merge(_locale_translation_default_update_options(), [
        'langcode' => $langcode,
        'overwrite_options' => [
          'customized' => TRUE,
          'not_customized' => TRUE
        ],
        'customized' => TRUE
      ]);

      $original_file = (object) [
        'filename' => $langcode . '.po',
        'uri' => $filepath
      ];
      $file = locale_translate_file_attach_properties($original_file, $options);
      $batch = locale_translate_batch_build([$file->uri => $file], $options);
      batch_set($batch);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function df_tools_translation_preprocess_page(&$variables) {
  // Add a new page variable with the current link.
  if (!isset($variables['language_current_link']) && isset($variables['language'])) {
    $variables['language_current_link'] = [
      '#markup' => t($variables['language']->getName())
    ];
  }

  // Add the rest of the language links  as well, with links to switch to the
  // correct language.
  if (!isset($variables['language_links'])) {
    // Get a list of the current languages.
    $languageManager = \Drupal::languageManager();
    $languages = $languageManager->getLanguages();

    // Remove the current language.
    unset($languages[$variables['language']->getId()]);

    // Add each link to the language list.
    $links = [];
    foreach ($languages as $language) {
      $langcode = $language->getId();

      // Get the path to the current node, translated.
      $current_path = \Drupal::service('path.current')->getPath();
      $alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path, $langcode);
      // We don't need to alias English links.
      if ($langcode == 'en') {
        $langcode = '';
      }
      $url = \Drupal\Core\Url::fromUri('base:/' . $langcode . $alias);

      $current_name = [
        '#markup' => t($language->getName())
      ];

      $links[] = \Drupal::l($current_name, $url);
    }

    $variables['language_links'] = $links;
  }
}

