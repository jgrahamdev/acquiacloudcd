<?php

/**
 * @file
 * Contains df_tools_editor.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;

/**
 * Implements hook_ckeditor_plugin_info_alter().
 */
function df_tools_editor_editor_js_settings_alter(array &$settings) {
  foreach ($settings['editor']['formats'] as &$format) {
    // Swap in our custom JS by adding a pseudo plugin. We do this as we do not
    // provide a button, which is what traditional CKEditor plugins would do.
    $format['editorSettings']['drupalExternalPlugins']['df_tools_editor'] = base_path() . drupal_get_path('module', 'df_tools_editor') . '/js/df_tools_editor.js';
    $format['editorSettings']['extraPlugins'] .= ',df_tools_editor';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for editor_link_dialog.
 *
 * Add CSS classes for editor link dialog.
 */
function df_tools_editor_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state) {
  $html_restrictions = FALSE;
  $build_info = $form_state->getBuildInfo();
  if ($build_info && !empty($build_info['args'])) {
    foreach ($build_info['args'] as $argument) {
      if ($argument instanceof Editor) {
        $html_restrictions = $argument->getFilterFormat()->getHtmlRestrictions();
      }
      break 1;
    }
  }

  if (
    $html_restrictions === FALSE ||
    (!empty($html_restrictions['allowed']['a']) && !empty($html_restrictions['allowed']['a']['class']))
  ) {
    $input = !empty($form_state->getUserInput()['editor_object']) ?
    $form_state->getUserInput()['editor_object'] : [];

    // If class attribute is allowed by general, provide a textfield by
    // default. If not, use checkboxes.
    $form['attributes']['class'] = [
      '#type' => 'textfield',
      '#title' => t('CSS classes'),
      '#description' => t('CSS classes to add to the link'),
      '#default_value' => !empty($input['class']) ? $input['class'] : '',
    ];

    if (is_array($html_restrictions['allowed']['a']['class'])) {
      $options = array_combine(array_keys($html_restrictions['allowed']['a']['class']), array_keys($html_restrictions['allowed']['a']['class']));
      $wildcard_in_options = FALSE;

      foreach ($options as $option) {
        if (strpos($option, '*') !== FALSE) {
          $wildcard_in_options = TRUE;
          break 1;
        }
      }

      if (!$wildcard_in_options) {
        $form['attributes']['class']['#type'] = 'checkboxes';
        $form['attributes']['class']['#options'] = $options;
        $form['attributes']['class']['#default_value'] = !empty($input['class']) ?
          explode(' ', $input['class']) : [];
      }
    }

    array_unshift($form['#submit'], '_df_tools_editor_editor_link_dialog_submit');
  }
}

/**
 * Submit handler for core editor module's EditorLinkDialog form.
 *
 * @see df_tools_editor_form_editor_link_dialog_alter()
 */
function _df_tools_editor_editor_link_dialog_submit($form, FormStateInterface $form_state) {
  $attributes = $form_state->getValue('attributes');

  if (isset($attributes['class'])) {
    $css_classes = $attributes['class'];
    if (is_array($css_classes)) {
      $css_classes = implode(' ', array_keys(array_filter($attributes['class'])));
    }

    if (!empty($css_classes)) {
      $form_state->setValue(['attributes', 'class'], $css_classes);
    }
    else {
      $form_state->unsetValue(['attributes', 'class']);
    }
  }
}
